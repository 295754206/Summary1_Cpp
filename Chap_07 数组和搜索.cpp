
// 宣告一维数组

	int a[5];
	char b[4],c[4],d[4]; 
	
// 二维、三维

	int c[2][2] = {
					{1,2},
					{3,4}
					} 
				
	
// 传递数组元素是传递它的数值
// 传递数组名是传递它的指标

	void show(int [],int []);
	
	int main(){
		int a[] = {1,2,3};
		int b[] = {4,5,6};
		show(a,b);
	} 
	
	void show(int x[],int y[]){
		// ...
	}
	
// 传递二维数组（列数必须指定）

	void show(int [][3],int,char[]);
	int cal(int [][3]); 
	
//  二维字串数组

	char s[3][5] = {
					{'C','+','+'},	// 未定义的会是' '，int值为0，但正常空格int值为32 
					{'J','a','v','a'},
					{'B','a','s','i','c'}
					};
	char s2[3][5] = {
					{"C++"},
					{"Java"},
					{"Basic"} 
					}
					
	// 输出
	
		cout<<s;		// 二维cout<<s会是一个地址（而一维数组会是一个字串字串） 
		cout<<s[0];		// 第一行数组
		cout<<s[0][0]	// 输入第一个字符


// 排序

	// 气泡排序：
		// 从0->n、1->n、...(n-1)->n
		// 每一轮拿第一个数（最前面的数）逐个和后面的数对比，如果有最小，调换位置，否则不调
		
	// 选择排序：
		// 第一轮次找到所有最小值放0位
		// 第二轮此从1号位开始找到所有（1->(n-1)）最小值放1号位
		// 直到n-1轮最后2个数字比较即可
	
	// 大数据时选择排序比气泡快（不用大量的双方交换操作） 
	// 气泡在于每个都可能在每轮次交换到，选择直接选最小的放首位其他元素并不交换 

// 二分搜索
	
	// （另一个搜索方法是线性搜索直接逐一对比） 
	
	// 先排序
	// 上限最高，下限最低，中间项是2/1位置或者1/2偏小位置（(low+high)/2）
	// 对比中间项，大了新下限=原来中间项位置+1，小了新上限=原来中间项位置-1
	// 以上是在while（low<high）下，一旦突破，跳出。判断是不是low>high，是的话找不到 
			
			
// 获得含空白的字符串（enter结束），并给出长度
	
	char a[50];
	cin.get(a, 50);
	int l = strlen(a);	// 也有做法是 sizeof(a)/sizeof(char);
	cout << l<< endl;
